@extends('layouts.app')

@section('title', '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç ‚Äî –û—Ç–¥—ã—Ö –≤ –ö–∞—Ä–µ–ª–∏–∏')
@section('description', '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∞–¥—Ä–µ—Å, —Ñ–æ—Ç–æ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ.')

@section('content')
	<div class="container my-4">
		<div class="form-header">
			<h1 class="form-title">
				<i class="fas fa-plus me-2"></i>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
			</h1>
			<p class="form-subtitle">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫—Ä–∞—Å–∏–≤—ã–º –º–µ—Å—Ç–æ–º –ö–∞—Ä–µ–ª–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏</p>
		</div>

		<!-- –ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ -->
		<div class="form-alert">
			<div class="alert-content">
				<i class="fas fa-info-circle me-2"></i>
				<div>
					<strong>–ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</strong> –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ.
					<a href="{{ route('guidelines') }}" class="alert-link" target="_blank" rel="noopener">–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞</a>
				</div>
			</div>
		</div>


		<form method="POST" action="{{ route('posts.store') }}" enctype="multipart/form-data" id="post-create-form">
			@csrf
			<input type="hidden" name="status" id="status" value="moderation">
					<input type="hidden" name="latitude" id="latitude" value="{{ old('latitude') }}">
					<input type="hidden" name="longitude" id="longitude" value="{{ old('longitude') }}">
					<input type="hidden" name="main_index" id="main_index" value="{{ old('main_index', 0) }}">

			<div class="row g-4">
				<div class="col-lg-8">
					<div class="form-card">
						<div class="form-card-body">
							<div class="form-group">
								<label for="title" class="form-label">
									<i class="fas fa-heading me-1"></i>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
								</label>
								<input type="text" class="form-control form-control-lg @error('title') is-invalid @enderror" 
									   id="title" name="title" value="{{ old('title') }}" 
									   placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å—Ç—Ä–æ–≤ –ö–∏–∂–∏, –í–æ–¥–æ–ø–∞–¥ –ö–∏–≤–∞—á, –ì–æ—Ä–∞ –°–∞–º–ø–æ">
								<div class="form-text">–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞</div>
								@error('title')
									<div class="invalid-feedback">{{ $message }}</div>
								@enderror
							</div>

							<div class="mb-3">
								<label for="description" class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
								<textarea id="description" name="description" class="form-control @error('description') is-invalid @enderror" rows="8">{{ old('description') }}</textarea>
								@error('description')
									<div class="invalid-feedback">{{ $message }}</div>
								@enderror
							</div>

							<div class="mb-3">
								<label for="website_url" class="form-label">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç <span class="text-muted">(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span></label>
								<input type="url" id="website_url" name="website_url" class="form-control @error('website_url') is-invalid @enderror" 
									   placeholder="https://example.com" value="{{ old('website_url') }}">
								<div class="form-text">–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –º–µ—Å—Ç–∞ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</div>
								@error('website_url')
									<div class="invalid-feedback">{{ $message }}</div>
								@enderror
							</div>

							<div class="row g-3">
								<div class="col-md-6">
									<label for="category_id" class="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
									<select id="category_id" name="category_id" class="form-select @error('category_id') is-invalid @enderror">
										<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
										@foreach($categories as $category)
											<option value="{{ $category->id }}" {{ (int)old('category_id') === $category->id ? 'selected' : '' }}>{{ $category->name }}</option>
										@endforeach
									</select>
									@error('category_id')
										<div class="invalid-feedback">{{ $message }}</div>
									@enderror
						<small class="form-text text-muted">
							–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ/–∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (üåÑ), –ú–µ—Å—Ç–∞ –æ—Ç–¥—ã—Ö–∞ ‚Äî —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ/–ø–∏—Ç–∞–Ω–∏–µ/–∑–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞ (üè®).
							<a href="{{ route('guidelines') }}" target="_blank" rel="noopener">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
						</small>
								</div>
					<div class="col-md-6">
									<label for="address" class="form-label">–ê–¥—Ä–µ—Å</label>
									<div class="input-group">
										<input type="text" id="address" name="address" class="form-control @error('address') is-invalid @enderror" value="{{ old('address') }}" placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å...">
										<button type="button" id="geocode-btn" class="btn btn-outline-primary" title="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É">
											<i class="fas fa-map-marker-alt"></i>
										</button>
									</div>
									<div class="form-text">–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ª–∏–±–æ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ.</div>
									@error('address')
										<div class="invalid-feedback d-block">{{ $message }}</div>
									@enderror
									@error('latitude')
										<div class="invalid-feedback d-block">{{ $message }}</div>
									@enderror
									@error('longitude')
										<div class="invalid-feedback d-block">{{ $message }}</div>
									@enderror
									<div id="geocode-status" class="small mt-1"></div>

						<div class="row g-2 mt-2">
							<div class="col-6">
								<label for="latitude_input" class="form-label small text-muted mb-0">–®–∏—Ä–æ—Ç–∞</label>
								<input type="number" step="0.00000001" min="-90" max="90" id="latitude_input" class="form-control" placeholder="61.78700000">
							</div>
							<div class="col-6">
								<label for="longitude_input" class="form-label small text-muted mb-0">–î–æ–ª–≥–æ—Ç–∞</label>
								<input type="number" step="0.00000001" min="-180" max="180" id="longitude_input" class="form-control" placeholder="34.36400000">
							</div>
						</div>
								</div>
							</div>
						</div>
					</div>

					<div class="card mb-4">
						<div class="card-body">
							<h5 class="mb-3"><i class="far fa-images me-2"></i>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h5>
							<input type="file" name="photos[]" id="photos" class="form-control" accept="image/*" multiple>
							<div class="form-text">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û—Ç–º–µ—Ç—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.</div>
							<div id="photos-preview" class="row g-2 mt-2"></div>
						</div>
					</div>

					<div class="card mb-4">
						<div class="card-body">
							<h5 class="mb-3"><i class="fas fa-map-marked-alt me-2"></i>–ö–∞—Ä—Ç–∞</h5>
							
							<!-- Loader –¥–ª—è –∫–∞—Ä—Ç—ã -->
							<div id="create-map-loader" class="text-center py-4">
								<div class="spinner-border text-primary" role="status">
									<span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</span>
								</div>
								<p class="mt-2 text-muted">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
							</div>
							
							<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã -->
							<div id="create-map" style="width:100%;height:360px;border-radius:12px;overflow:hidden;display:none;"></div>
							
							<!-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã -->
							<div id="create-map-error" class="alert alert-warning" style="display:none;">
								<i class="fas fa-exclamation-triangle me-2"></i>
								<strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</strong><br>
								<small>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.</small>
							</div>
							
							<div class="small text-muted mt-2">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.</div>
						</div>
					</div>
				</div>

				<div class="col-lg-4">
					<div class="card mb-4">
						<div class="card-body">
							<h5 class="mb-3"><i class="fas fa-paper-plane me-2"></i>–ü—É–±–ª–∏–∫–∞—Ü–∏—è</h5>
							<p class="text-muted mb-3">–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.</p>
							<button type="submit" class="btn btn-primary w-100" id="submit-btn"><i class="fas fa-paper-plane me-2"></i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</button>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>

	@push('styles')
		<link href="https://cdn.quilljs.com/1.3.7/quill.snow.css" rel="stylesheet">
		<style>
			.photo-preview-card {
				transition: transform 0.2s ease, box-shadow 0.2s ease;
			}
			.photo-preview-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 4px 8px rgba(0,0,0,0.15);
			}
			.photo-preview-card .card-img-top {
				border-radius: 0.375rem 0.375rem 0 0;
			}
			.drag-over {
				background-color: #e3f2fd !important;
				border: 2px dashed #2196f3 !important;
				border-radius: 0.5rem;
			}
			#photos-preview {
				min-height: 100px;
				border: 2px dashed #dee2e6;
				border-radius: 0.5rem;
				padding: 1rem;
				transition: border-color 0.2s ease;
			}
			#photos-preview:empty::before {
				content: "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—é–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã";
				display: block;
				text-align: center;
				color: #6c757d;
				font-style: italic;
				padding: 2rem;
			}
			
		</style>
	@endpush

	@push('scripts')
		<script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
		<script src="{{ asset('js/photo-preview.js') }}"></script>
		<script>
			// WYSIWYG (Quill) -> hidden textarea binding
			(function(){
				const el = document.getElementById('description');
				const initial = el.value;
				const wrapper = document.createElement('div');
				wrapper.id = 'editor';
				wrapper.className = 'form-control';
				wrapper.style.minHeight = '240px';
				el.parentNode.insertBefore(wrapper, el);
				el.style.display = 'none';
				const quill = new Quill('#editor', { theme: 'snow', placeholder: '–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å...' });
				quill.root.innerHTML = initial ? initial : '';
				document.getElementById('post-create-form').addEventListener('submit', function(){
					el.value = quill.root.innerHTML;
				});

				// Autosave draft to localStorage
				const DRAFT_KEY = 'post_create_draft';
				function saveDraft() {
					const data = {
						title: document.getElementById('title')?.value || '',
						description: quill.root.innerHTML || '',
						category_id: document.getElementById('category_id')?.value || '',
						address: document.getElementById('address')?.value || '',
						website_url: document.getElementById('website_url')?.value || '',
						latitude: document.getElementById('latitude')?.value || '',
						longitude: document.getElementById('longitude')?.value || ''
					};
					try { localStorage.setItem(DRAFT_KEY, JSON.stringify(data)); } catch (_) {}
				}
				function loadDraft() {
					try {
						const raw = localStorage.getItem(DRAFT_KEY);
						if (!raw) return;
						const d = JSON.parse(raw);
						if (d.title) document.getElementById('title').value = d.title;
						if (d.description) { quill.root.innerHTML = d.description; el.value = d.description; }
						if (d.category_id) document.getElementById('category_id').value = d.category_id;
						if (d.address) document.getElementById('address').value = d.address;
						if (d.website_url) document.getElementById('website_url').value = d.website_url;
						if (d.latitude && d.longitude) {
							document.getElementById('latitude').value = d.latitude;
							document.getElementById('longitude').value = d.longitude;
							const latIn = document.getElementById('latitude_input');
							const lngIn = document.getElementById('longitude_input');
							if (latIn) latIn.value = d.latitude;
							if (lngIn) lngIn.value = d.longitude;
							if (typeof updateMapCenter === 'function') {
								updateMapCenter([parseFloat(d.latitude), parseFloat(d.longitude)]);
							}
						}
					} catch (_) {}
				}
				// Bind events for autosave
				['title','category_id','address','website_url','latitude','longitude'].forEach(id => {
					const elx = document.getElementById(id);
					if (elx) elx.addEventListener('input', saveDraft);
				});
				const latManual = document.getElementById('latitude_input');
				const lngManual = document.getElementById('longitude_input');
				if (latManual) latManual.addEventListener('input', saveDraft);
				if (lngManual) lngManual.addEventListener('input', saveDraft);
				quill.on('text-change', saveDraft);
				window.addEventListener('load', loadDraft);
				document.getElementById('post-create-form').addEventListener('submit', function(){
					try { localStorage.removeItem(DRAFT_KEY); } catch (_) {}
				});
			})();

			// Yandex Maps: geocode by address + draggable marker -> lat/lng
			let createMap;
			let createMapLoadTimeout;
			let marker; // –¥–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤–Ω–µ init

			// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
			function showCreateMapError() {
				document.getElementById('create-map-loader').style.display = 'none';
				document.getElementById('create-map-error').style.display = 'block';
			}

			// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –ª–æ–∞–¥–µ—Ä–∞ –∏ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã
			function showCreateMap() {
				document.getElementById('create-map-loader').style.display = 'none';
				document.getElementById('create-map').style.display = 'block';
			}

			function initCreateMap() {
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã (10 —Å–µ–∫—É–Ω–¥)
				createMapLoadTimeout = setTimeout(function() {
					showCreateMapError();
				}, 10000);

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
				if (typeof ymaps === 'undefined') {
					console.error('API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
					showCreateMapError();
					return;
				}

				try {
					ymaps.ready(function(){
						try {
							createMap = new ymaps.Map('create-map', { 
								center: [61.787, 34.364], 
								zoom: 7, 
								controls: ['zoomControl','fullscreenControl', 'typeSelector'] 
							});
							
							// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
							createMap.events.add('ready', function() {
								clearTimeout(createMapLoadTimeout);
								showCreateMap();
							});
							
							// —Å–æ–∑–¥–∞—ë–º –º–∞—Ä–∫–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–Ω–µ—à–Ω—é—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
							marker = new ymaps.Placemark(createMap.getCenter(), {}, { 
								draggable: true, 
								preset: 'islands#redIcon' 
							});
							createMap.geoObjects.add(marker);

							// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
							marker.events.add('dragend', function(){ 
								setLatLng(marker.geometry.getCoordinates()); 
							});

							// –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞–∫ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
							setTimeout(function(){
								if (createMap) {
									clearTimeout(createMapLoadTimeout);
									showCreateMap();
								}
							}, 3000);
						} catch (error) {
							console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
							clearTimeout(createMapLoadTimeout);
							showCreateMapError();
						}
					});
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ymaps:', error);
					clearTimeout(createMapLoadTimeout);
					showCreateMapError();
				}
			}

			function setLatLng(coords){
				document.getElementById('latitude').value = coords[0].toFixed(8);
				document.getElementById('longitude').value = coords[1].toFixed(8);
				const latInput = document.getElementById('latitude_input');
				const lngInput = document.getElementById('longitude_input');
				if (latInput) latInput.value = coords[0].toFixed(8);
				if (lngInput) lngInput.value = coords[1].toFixed(8);
			}

			function updateMapCenter(coords) {
				if (createMap) {
					createMap.setCenter(coords, 14);
					if (marker) {
						marker.geometry.setCoordinates(coords);
					}
					setLatLng(coords);
				}
			}

			// –§—É–Ω–∫—Ü–∏—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
			function geocodeAddress(address, callback) {
				if (!address || address.trim() === '') {
					showGeocodeStatus('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞', 'warning');
					return;
				}

				showGeocodeStatus('–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...', 'info');
				
				ymaps.geocode(address, { 
					results: 1,
					kind: 'house'
				}).then(function(res) {
					var first = res.geoObjects.get(0);
					if (!first) {
						showGeocodeStatus('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å.', 'danger');
						return;
					}
					
					var coords = first.geometry.getCoordinates();
					var foundAddress = first.getAddressLine();
					
					// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
					document.getElementById('address').value = foundAddress;
					
					// –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
					updateMapCenter(coords);
					
					showGeocodeStatus(`–ù–∞–π–¥–µ–Ω–æ: ${foundAddress}`, 'success');
					
					if (callback) callback(coords, foundAddress);
				}).catch(function(error) {
					console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
					showGeocodeStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞', 'danger');
				});
			}

			// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
			function showGeocodeStatus(message, type) {
				const statusEl = document.getElementById('geocode-status');
				statusEl.innerHTML = `<span class="text-${type}">${message}</span>`;
				
				// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
				setTimeout(() => {
					statusEl.innerHTML = '';
				}, 5000);
			}

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
			document.getElementById('geocode-btn').addEventListener('click', function() {
				const address = document.getElementById('address').value.trim();
				geocodeAddress(address);
			});

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
			document.getElementById('address').addEventListener('keypress', function(e) {
				if (e.key === 'Enter') {
					e.preventDefault();
					geocodeAddress(this.value.trim());
				}
			});

			// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
			let geocodeTimeout;
			document.getElementById('address').addEventListener('input', function() {
				clearTimeout(geocodeTimeout);
				geocodeTimeout = setTimeout(() => {
					if (this.value.trim().length > 10) { // –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
						geocodeAddress(this.value.trim());
					}
				}, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
			});

			// –ó–∞–≥—Ä—É–∂–∞–µ–º API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
			loadYandexMapsAPI();

			// –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ -> –∫–∞—Ä—Ç–∞
			(function(){
				const latInput = document.getElementById('latitude_input');
				const lngInput = document.getElementById('longitude_input');
				function normalizeCoordInput(inputEl, min, max) {
					let v = (inputEl.value || '').toString().replace(',', '.').trim();
					v = v.replace(/[^0-9.\-]/g, '');
					const n = parseFloat(v);
					if (!isFinite(n)) return null;
					const clamped = Math.min(max, Math.max(min, n));
					inputEl.value = clamped.toFixed(8);
					return clamped;
				}
				function applyManualCoords(){
					const lat = normalizeCoordInput(latInput, -90, 90);
					const lng = normalizeCoordInput(lngInput, -180, 180);
					if (isFinite(lat) && isFinite(lng)) {
						updateMapCenter([lat, lng]);
					}
				}
				if (latInput) { latInput.addEventListener('change', applyManualCoords); latInput.addEventListener('blur', applyManualCoords); }
				if (lngInput) { lngInput.addEventListener('change', applyManualCoords); lngInput.addEventListener('blur', applyManualCoords); }
			})();

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã - –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–∞–π–ª—ã –∏–∑ PhotoPreview –≤ —Ñ–æ—Ä–º—É
			document.getElementById('post-create-form').addEventListener('submit', function(e) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ PhotoPreview
				if (window.photoPreview && window.photoPreview.getFiles().length > 0) {
					// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ PhotoPreview –≤ —Å–∫—Ä—ã—Ç—ã–π input
					const fileInput = this.querySelector('input[name="photos[]"]');
					if (fileInput) {
						// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataTransfer –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
						const dataTransfer = new DataTransfer();
						window.photoPreview.getFiles().forEach(file => {
							dataTransfer.items.add(file);
						});
						fileInput.files = dataTransfer.files;
					}
					
					// –û–±–Ω–æ–≤–ª—è–µ–º main_index –µ—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
					const mainIndexInput = this.querySelector('input[name="main_index"]');
					if (mainIndexInput && window.photoPreview.getMainIndex() !== null) {
						mainIndexInput.value = window.photoPreview.getMainIndex();
					}
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
					const submitBtn = this.querySelector('button[type="submit"]');
					const originalText = submitBtn.innerHTML;
					submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>–û—Ç–ø—Ä–∞–≤–∫–∞...';
					submitBtn.disabled = true;
					
					// –ù–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã - –ø—É—Å—Ç—å –æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
					console.log('–§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º');
				} else {
					// –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ PhotoPreview, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
					console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –∏–∑ PhotoPreview');
				}
			});

			// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
			function loadYandexMapsAPI() {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
				if (typeof window.loadYandexMaps === 'function') {
					console.log('üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ API');
					window.loadYandexMaps(function() {
						ymaps.ready(function() {
							initCreateMap();
						});
					});
					return;
				}
				
				// Fallback - –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
				if (typeof ymaps !== 'undefined') {
					console.log('API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
					ymaps.ready(function() {
						initCreateMap();
					});
					return;
				}

				console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç...');
				
				const script = document.createElement('script');
				const apiKey = window.yandexMapsKey || '{{ config("services.yandex.maps_key") }}';
				
				if (apiKey) {
					script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;
				} else {
					script.src = 'https://api-maps.yandex.ru/2.1/?lang=ru_RU';
					console.warn('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
				}
				
				script.onload = function() {
					console.log('‚úÖ API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
					ymaps.ready(function() {
						initCreateMap();
					});
				};
				
				script.onerror = function() {
					console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç');
					showCreateMapError();
				};
				
				document.head.appendChild(script);
			}

			// Photos preview + select main
			(function(){
				const input = document.getElementById('photos');
				const preview = document.getElementById('photos-preview');
				const mainIndex = document.getElementById('main_index');

				if (input && preview && mainIndex) {
				// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PhotoPreview
				window.photoPreview = new PhotoPreview({
					input: input,
					preview: preview,
					mainIndexInput: mainIndex,
						maxFiles: 20,
					maxFileSize: 5 * 1024 * 1024, // 5MB
					allowedTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
				});

				// –í–∫–ª—é—á–∞–µ–º drag & drop
				window.photoPreview.enableDragDrop();
					
					console.log('üì∑ PhotoPreview –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
				} else {
					console.error('üì∑ PhotoPreview: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã', {
						input: !!input,
						preview: !!preview,
						mainIndex: !!mainIndex
					});
				}
			})();

		</script>
	@endpush
@endsection
